generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String?
  role                    UserRole
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  accounts                Account[]
  applications            Application[]
  candidateProfile        CandidateProfile?
  companyProfile          CompanyProfile?
  jobs                    Job[]                    @relation("CompanyJobs")
  messageLogs             MessageLog[]
  messageTemplates        MessageTemplate[]
  receivedNotifications   Notification[]           @relation("NotificationReceiver")
  sentNotifications       Notification[]           @relation("NotificationSender")
  receivedOutreach        Outreach[]               @relation("ReceiverOutreach")
  sentOutreach            Outreach[]               @relation("SenderOutreach")
  preScreenings           PreScreening[]           @relation("CompanyPreScreenings")
  preScreeningSubmissions PreScreeningSubmission[]

  sessions                Session[]

  @@index([email])
  @@index([role])
}

model CandidateProfile {
  id              String        @id @default(cuid())
  userId          String        @unique
  fullName        String?
  parsedProfile   Json?
  rawResumeText   String?
  resumeText      String?
  resumeUrl       String?
  completionScore Float?
  skills          String[]
  experience      String?
  location        String?
  employmentType  String?
  searchVector    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  certifications  String[]
  education       Json?
  githubUrl       String?
  languages       String[]
  linkedinUrl     String?
  phoneNumber     String?
  portfolioUrl    String?
  workHistory     Json?
  applications    Application[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([skills])
  @@index([experience])
  @@index([location])
  @@index([employmentType])
}

model Job {
  id             String        @id @default(cuid())
  companyId      String
  title          String
  description    String
  location       String?
  experience     String?
  employmentType String?
  isRemote       Boolean       @default(false)
  skills         String[]
  searchVector   String?
  status         String        @default("ACTIVE")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  applications   Application[]
  outreach       Outreach[]
  preScreeningId String?
  preScreening   PreScreening? @relation("JobPreScreenings", fields: [preScreeningId], references: [id])
  company        User          @relation("CompanyJobs", fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([skills])
  @@index([createdAt])
  @@index([location])
  @@index([status])
}

model Application {
  id                  String            @id @default(cuid())
  jobId               String
  candidateId         String
  userId              String
  matchScore          Float?
  feedbackSuggestions String?
  status              ApplicationStatus @default(PENDING)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  candidate           CandidateProfile  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job                 Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageLogs         MessageLog[]
  outreach            Outreach[]
  interviewReport     InterviewReport? // Link to the interview report
  score               Float? // Score from the interview

  @@unique([jobId, candidateId])
  @@index([jobId])
  @@index([candidateId])
  @@index([userId])
  @@index([status])
}

model MessageTemplate {
  id        String       @id @default(cuid())
  companyId String
  type      TemplateType
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  company   User         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([type])
}

model MessageLog {
  id            String         @id @default(cuid())
  applicationId String?
  senderId      String
  receiverId    String?
  channel       MessageChannel
  content       String
  status        MessageStatus  @default(PENDING)
  sentAt        DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  application   Application?   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  sender        User           @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([applicationId])
  @@index([status])
}

model Notification {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  title      String
  content    String
  isRead     Boolean  @default(false)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  outreachId String?
  receiver   User     @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
  @@index([createdAt])
}

model InterviewReport {
  id                  String      @id @default(cuid())
  applicationId       String      @unique
  score               Float
  summary             String
  strengths           String[]
  areasForImprovement String[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  application         Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CompanyProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  description String?
  website     String?
  location    String?
  industry    String?
  size        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  logo        String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PreScreening {
  id          String                   @id @default(cuid())
  companyId   String
  questions String[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  company     User                     @relation("CompanyPreScreenings", fields: [companyId], references: [id], onDelete: Cascade)
  submissions PreScreeningSubmission[]
  jobs      Job[]    @relation("JobPreScreenings")
  

  @@index([companyId])
}

model PreScreeningSubmission {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  preScreeningId String
  candidateId    String
  answers        String[]
  candidate      User         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  preScreening   PreScreening @relation(fields: [preScreeningId], references: [id], onDelete: Cascade)

  @@index([preScreeningId])
  @@index([candidateId])
}

model Outreach {
  id            String         @id @default(cuid())
  senderId      String
  receiverId    String
  jobId         String?
  message       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sender        User           @relation("SenderOutreach", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User           @relation("ReceiverOutreach", fields: [receiverId], references: [id], onDelete: Cascade)
  job           Job?           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  application   Application?   @relation(fields: [applicationId], references: [id])
  applicationId String?

  @@index([senderId])
  @@index([receiverId])
  @@index([jobId])
}

enum UserRole {
  CANDIDATE
  COMPANY
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
  INTERVIEW_COMPLETED
}

enum MessageChannel {
  EMAIL
  WHATSAPP
  SMS
  PLATFORM
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
}

enum TemplateType {
  OUTREACH
  REJECTION
  INTERVIEW
  CONGRATS
}
